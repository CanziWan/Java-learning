<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--
    namespace:名称空间
-->
<mapper namespace="com.itheima.mapper.BrandMapper">

    <!--
        数据库表的字段名称  和  实体类的属性名称  不一样，则不能自动封装数据
            * 一、起别名：对不一样的列名起别名，让别名和实体类的属性名一样
                    - 缺点：每次查询都要定义一次别名
                        * 解决方法：利用SQL片段
                            - 缺点：不灵活
            * 二、resultMap 使用步骤：
                    1、定义<resultMap>标签
                    2、在<select>标签中，使用resultMap属性替换resultType属性
    -->

    <!--
        id：唯一标识
        type：映射的类型，支持别名
    -->
    <resultMap id="brandResultMap" type="brand">
        <!--
            id：完成主键字段的映射
                column：表的列名
                property：实体类的属性名
            result：完成一般字段的映射
                column：表的列名
                property：实体类的属性名
        -->
        <result column="brand_name" property="brandName"/>
        <result column="company_name" property="companyName"/>
    </resultMap>


    <select id="selectAll" resultMap="brandResultMap">
        select *
        from tb_brand;
    </select>


    <!--
        SQL片段
    -->
    <!--
    <sql id="brand_column">
        id, brand_name as brandName, company_name as companyName, ordered, description, status
    </sql>

    <select id="selectAll" resultType="Brand">
        select
            <include refid="brand_column"/>
        from tb_brand;
    </select>
    -->

    <!-- statement -->
    <!--<select id="selectAll" resultType="Brand">
        select *
        from tb_brand;
    </select>-->


    <!--
        * 参数占位符：(两种)
            1.#{}：会将其替换成 ? ，为了防止SQL注入
            2.${}：拼SQL。会存在SQL注入问题
            3.使用时机：
                * 参数传递的时候：#{}
                * 表名或者列名不固定的情况下：${}  会存在SQL注入问题

        * 参数类型：parameterType:可以省略
        * 特殊字符处理：
            1.转义字符： 如 &lt; 表示 <
            2.CDATA区： <![CDATA[   <   ]]>       写CD就有提示了
    -->
    <!--<select id="selectById" resultMap="brandResultMap">
        select *
        from tb_brand where id = #{id};
    </select>-->

    <select id="selectById" resultMap="brandResultMap">
        select *
        from tb_brand
        where id
        <![CDATA[
            <
        ]]>
        #{id};
    </select>

    <!--
        条件查询
    -->
    <!--<select id="selectByCondition" resultMap="brandResultMap">
        select *
        from tb_brand
        where status = #{status}
          and company_name like #{companyName}
          and brand_name like #{brandName};
    </select>-->

    <!--
        动态条件查询
            * if：条件判断
                * test：逻辑表达式
            * 问题：（第一个条件为空时，sql语句会多个and）
                * 解决方法：1、恒等式：where后面加上条件 1 = 1
                          2、<where>标签：替换where关键字
    -->
    <select id="selectByCondition" resultMap="brandResultMap">
        select *
        from tb_brand
        /*where 1 = 1*/
        <where>
            <if test="status != null">
                and status = #{status}
            </if>
            <if test="companyName != null and companyName != ''">
                and company_name like #{companyName}
            </if>
            <if test="brandName != null and brandName != ''">
                and brand_name like #{brandName}
            </if>
        </where>
    </select>


    <!--
        单条件动态查询
    -->
    <!--<select id="selectByConditionSingle" resultMap="brandResultMap">
        select *
        from tb_brand
        where
        <choose> &lt;!&ndash;相当于switch&ndash;&gt;
            <when test="status != null"> &lt;!&ndash;相当于case&ndash;&gt;
                status = #{status}
            </when>
            <when test="companyName != null and companyName != ''"> &lt;!&ndash;相当于case&ndash;&gt;
                company_name like #{companyName}
            </when>
            <when test="brandName != null and brandName != ''"> &lt;!&ndash;相当于case&ndash;&gt;
                brand_name like #{brandName}
            </when>
            <otherwise> &lt;!&ndash;相当于default&ndash;&gt;
                1 = 1
            </otherwise>
        </choose>
    </select>-->

    <select id="selectByConditionSingle" resultMap="brandResultMap">
        select *
        from tb_brand
        <where>
            <choose> <!--相当于switch-->
                <when test="status != null"> <!--相当于case-->
                    status = #{status}
                </when>
                <when test="companyName != null and companyName != ''"> <!--相当于case-->
                    company_name like #{companyName}
                </when>
                <when test="brandName != null and brandName != ''"> <!--相当于case-->
                    brand_name like #{brandName}
                </when>
            </choose>
        </where>
    </select>


    <!--添加-->
    <insert id="add" useGeneratedKeys="true" keyProperty="id">
        insert into tb_brand (brand_name, company_name, ordered, description, status)
        values (#{brandName}, #{companyName}, #{ordered}, #{description}, #{status});
    </insert>

    <!--修改-->
    <!--<update id="update">
        update tb_brand
        set
            brand_name = #{brandName},
            company_name = #{companyName},
            ordered = #{ordered},
            description = #{description},
            status = #{status}
        where id = #{id};
    </update>-->

    <!--
        修改动态字段：<set>标签
    -->
    <update id="update">
        update tb_brand
        <set>
            <if test="brandName != null and brandName != ''">
                brand_name = #{brandName},
            </if>
            <if test="companyName != null and companyName != ''">
                company_name = #{companyName},
            </if>
            <if test="ordered != null">
                ordered = #{ordered},
            </if>
            <if test="description != null and description != ''">
                description = #{description},
            </if>
            <if test="status != null">
                status = #{status}
            </if>
        </set>
        where id = #{id};
    </update>


    <!--根据id删除记录-->
    <delete id="deleteById">
        delete
        from tb_brand
        where id = #{id};
    </delete>


    <!--
        批量删除：利用<foreach>标签

        注意：MyBatis会将数组参数，封装成一个Map集合。
            * 法一：默认：array = 数组
            * 法二：使用@Param注解改变Map集合的默认key的名称
    -->
    <delete id="deleteByIds">
        delete
        from tb_brand
        where id in
            <foreach collection="ids" item="id" separator="," open="(" close=")">
                #{id}
            </foreach>
            ;
    </delete>

</mapper>